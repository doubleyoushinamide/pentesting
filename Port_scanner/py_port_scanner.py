#!/bin/python3

import socket
import ipaddress
import sys
import time
#from pyfiglet import Figlet
from figlet_one import print_title



def validate_ip(ip):
    try:
        ipaddress.ip_address(ip)
        return True
    except ValueError:
        return False

def validate_ports(port_range):
    ports = []
    for part in port_range.split(','):
        if '-' in part:
            start, end = part.split('-')
            if not start.isdigit() or not end.isdigit():
                return None
            ports.extend(range(int(start), int(end) + 1))
        else:
            if not part.isdigit():
                return None
            ports.append(int(part))
    return ports

def scan_ports(ports, ip):
    open_ports = []
    closed_ports = []
    total_ports = len(ports)

    for i, port in enumerate(ports):
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.settimeout(1)
        result = sock.connect_ex((ip, port))
        if result == 0:
            open_ports.append(port)
        else:
            closed_ports.append(port)
        sock.close()
        
        # Update progress bar
        progress = int((i + 1) / total_ports * 100)
        progress_bar = f"[{'#' * (progress // 2)}{' ' * (50 - (progress // 2))}] {progress}%"
        print(f"\r{progress_bar}", end='')

    return open_ports, closed_ports

if __name__ == "__main__":
    print("-------------------------------------------------------------------")
    print_title('Port Scanner', 'By Shina Salau')
    print("-------------------------------------------------------------------")
    try:
        port_range = input("Enter port range (e.g., 80 or 40-400 or 40-80,100,200-300): ")
        ip_address = input("Enter IP address: ")

        if not validate_ip(ip_address):
            print("\nInvalid IP address.")
            print("Usage: python3 port_scanner.py <port1-port2> <IP address of target network>")
            sys.exit(1)

        ports = validate_ports(port_range)
        if ports is None:
            print("\nInvalid port range.")
            print("Usage: python3 port_scanner.py <port1-port2> <IP address of target network>")
            sys.exit(1)

        print(f"\nScanning {ip_address} on ports {port_range}...")

        open_ports, closed_ports = scan_ports(ports, ip_address)

        print("\n\nScan Complete")
        print("\nSummary:")
        print(f"Total open ports: {len(open_ports)}")
        print(f"Total closed ports: {len(closed_ports)}")
        if open_ports:
            print(f"Open ports: {', '.join(map(str, open_ports))}")
        #if closed_ports:
            #print(f"Closed ports: {', '.join(map(str, closed_ports))}")

    except KeyboardInterrupt:
        print("\nYou have ended this program abruptly!")
        sys.exit(0)
