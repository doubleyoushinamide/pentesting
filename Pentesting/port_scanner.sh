#!/bin/bash

echo "---------------------------------------------------------"
figlet "Port Scanner"
echo "                                             By: Shina Salau"
echo "---------------------------------------------------------"

# Check if IP address and port range are provided as arguments
if [ -z "$1" ] || [ -z "$2" ]; then
    echo "Usage: $0 <IP_ADDRESS> <PORT_RANGE>"
    echo "Example: $0 192.168.1.1 50-80"
    echo "Example: $0 192.168.1.1 80"
    exit 1
fi

IP=$1
PORT_RANGE=$2
OPEN_PORTS=()
CLOSED_PORTS=0

# Error handling to catch incorrect IP addresses
validate() {
    local ip=$1
    local valid_ip_regex="^([0-9]{1,3}\.){3}[0-9]{1,3}$"
    if [[ $ip =~ $valid_ip_regex ]]; then
        IFS='.' read -r -a octets <<< "$ip"
        for octet in "${octets[@]}"; do
            if ((octet < 0 || octet > 255)); then
                return 1
            fi
        done
        return 0
    else
        return 1
    fi
}

# This section validates the port range(s)
validate_port_range() {
    local port_range=$1
    if [[ $port_range =~ ^[0-9]+-[0-9]+$ ]]; then
        IFS='-' read -r port1 port2 <<< "$port_range"
        if (( port1 >= 0 && port1 <= 65535 && port2 >= 0 && port2 <= 65535 && port1 <= port2 )); then
            return 0
        else
            return 1
        fi
    elif [[ $port_range =~ ^[0-9]+$ ]]; then
        if (( port_range >= 0 && port_range <= 65535 )); then
            return 0
        else
            return 1
        fi
    else
        return 1
    fi
}

# Validate the provided IP address
if ! validate $1; then
    echo "Error!: Invalid IP address format."
    exit 1
fi

# Validate the provided port range
if ! validate_port_range $PORT_RANGE; then
    echo "Error: Invalid port range format."
    exit 1
fi

# Pretty line function
pretty_line() {
    echo "=========================================="
}

# Function to scan a single port
scan_port() {
    local port=$1
    if timeout 1 bash -c "</dev/tcp/$IP/$port" &> /dev/null; then
        echo "Port $port is open"
        OPEN_PORTS+=($port)
    else
        echo "Port $port is closed"
        local closed_ports=$(cat "$CLOSED_PORTS_FILE")
        echo $((closed_ports + 1)) > "$CLOSED_PORTS_FILE"
    fi
}

pretty_line

# Loop through ports based on the provided range or single port
if [[ $PORT_RANGE =~ ^[0-9]+-[0-9]+$ ]]; then
    IFS='-' read -r port1 port2 <<< "$PORT_RANGE"
    for port in $(seq $port1 $port2); do
        echo -n "Scanning port $port... "
        scan_port $port &
    done
elif [[ $PORT_RANGE =~ ^[0-9]+$ ]]; then
    port=$PORT_RANGE
    echo -n "Scanning port $port... "
    scan_port $port &
fi

# Wait for all background processes to finish
wait

# Display footer
pretty_line
echo "         Scanning Complete"
pretty_line

# Display summary of open and closed ports
echo "Summary:"
echo "Open Ports: ${OPEN_PORTS[*]}"
echo "Total Closed Ports: $CLOSED_PORTS"

echo "---------------------------------------------------------"
figlet "Port Scanner"
echo "                                             By: Shina Salau"
echo "---------------------------------------------------------"

